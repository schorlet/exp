#-*- coding: utf-8 -*-

def _partitions(n, unique):
	if n <= 0:
		return [[]]

	list = [[n]]
	for m in range(n-1, 0, -1):
		ll = _partitions(n-m, unique)
		for l in ll:
			if unique and m < l[0]:
				continue
			l.insert(0, m)
			list.append(l)

	return list

def combinations(n):
	"""
	>>> combinations(3)
	[[3], [2, 1], [1, 1, 1]]

	>>> ll = combinations(7)
	>>> print len(ll), ll
	15 [[7], [6, 1], [5, 2], [5, 1, 1], [4, 3], [4, 2, 1], [4, 1, 1, 1], [3, 3, 1], [3, 2, 2], [3, 2, 1, 1], [3, 1, 1, 1, 1], [2, 2, 2, 1], [2, 2, 1, 1, 1], [2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1]]
	"""
	return _partitions(n, True)

def permutations(n):
	"""
	>>> permutations(3)
	[[3], [2, 1], [1, 2], [1, 1, 1]]

	>>> ll = permutations(7)
	>>> print len(ll), ll
	64 [[7], [6, 1], [5, 2], [5, 1, 1], [4, 3], [4, 2, 1], [4, 1, 2], [4, 1, 1, 1], [3, 4], [3, 3, 1], [3, 2, 2], [3, 2, 1, 1], [3, 1, 3], [3, 1, 2, 1], [3, 1, 1, 2], [3, 1, 1, 1, 1], [2, 5], [2, 4, 1], [2, 3, 2], [2, 3, 1, 1], [2, 2, 3], [2, 2, 2, 1], [2, 2, 1, 2], [2, 2, 1, 1, 1], [2, 1, 4], [2, 1, 3, 1], [2, 1, 2, 2], [2, 1, 2, 1, 1], [2, 1, 1, 3], [2, 1, 1, 2, 1], [2, 1, 1, 1, 2], [2, 1, 1, 1, 1, 1], [1, 6], [1, 5, 1], [1, 4, 2], [1, 4, 1, 1], [1, 3, 3], [1, 3, 2, 1], [1, 3, 1, 2], [1, 3, 1, 1, 1], [1, 2, 4], [1, 2, 3, 1], [1, 2, 2, 2], [1, 2, 2, 1, 1], [1, 2, 1, 3], [1, 2, 1, 2, 1], [1, 2, 1, 1, 2], [1, 2, 1, 1, 1, 1], [1, 1, 5], [1, 1, 4, 1], [1, 1, 3, 2], [1, 1, 3, 1, 1], [1, 1, 2, 3], [1, 1, 2, 2, 1], [1, 1, 2, 1, 2], [1, 1, 2, 1, 1, 1], [1, 1, 1, 4], [1, 1, 1, 3, 1], [1, 1, 1, 2, 2], [1, 1, 1, 2, 1, 1], [1, 1, 1, 1, 3], [1, 1, 1, 1, 2, 1], [1, 1, 1, 1, 1, 2], [1, 1, 1, 1, 1, 1, 1]]
	"""
	return _partitions(n, False)


if __name__ == '__main__':
	import sys
	n = int(sys.argv[1])
	for l in enumerate(combinations(n)):
		print l[0]+1, l[1]
	for l in enumerate(permutations(n)):
		print l[0]+1, l[1]
